/******************************************************************************
 * Copyright (c) 2015 IBM Corporation
 * All rights reserved.
 * This program and the accompanying materials
 * are made available under the terms of the BSD License
 * which accompanies this distribution, and is available at
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * Contributors:
 *     IBM Corporation - initial implementation
 *****************************************************************************/
/*
 * libtpm bindings for SLOF - implementation
 */

#include <tcgbios.h>
#include <stdbool.h>


/************************************************/
/* Startup TPM code                             */
/* SLOF:   tpm-start  ( -- errcode )            */
/* LIBTPM: tpm_start(void)                      */
/************************************************/
PRIM(tpm_X2d_start)
	PUSH;
	TOS.n = tpm_start();
MIRP

/************************************************/
/* Shutdown TPM layer before OS takes over      */
/* SLOF:   tpm-finalize  ( -- )                 */
/* LIBTPM: tpm_finalize(void)                   */
/************************************************/
PRIM(tpm_X2d_finalize)
	tpm_finalize();
MIRP

/***************************************************************/
/* Prepare TPM state for bootloader                            */
/* SLOF:   tpm-unassert-physical-presence ( -- errcode )       */
/* LIBTPM: tpm_unassert_physical-presence(void)                */
/***************************************************************/
PRIM(tpm_X2d_unassert_X2d_physical_X2d_presence)
	PUSH;
	TOS.n = tpm_unassert_physical_presence();
MIRP

/*************************************************************/
/* Convey log address and size                               */
/* SLOF:   tpm-set-log-parameters  ( addr size -- )          */
/* LIBTPM: tpm_set_log_parameters(void *addr, uint64_t size) */
/*************************************************************/
PRIM(tpm_X2d_set_X2d_log_X2d_parameters)
	int size = TOS.u; POP;
	void *addr = TOS.a; POP;
	tpm_set_log_parameters(addr, size);
MIRP

/**************************************************/
/* Firmware API                                   */
/* SLOF:   tpm-log-event ( eventptr -- success? ) */
/* LIBTPM: success = tpm-log-event                */
/**************************************************/
PRIM(tpm_X2d_log_X2d_event)
	void *eventptr = TOS.a;
	TOS.n = tpm_log_event(eventptr);
MIRP

/********************************************************/
/* Firmware API                                         */
/* SLOF:   tpm-hash-log-extend-event ( eventptr -- rc ) */
/* LIBTPM: errcode = tpm-hash-log-extend-event          */
/********************************************************/
PRIM(tpm_X2d_hash_X2d_log_X2d_extend_X2d_event)
	void *eventptr = TOS.a;
	TOS.n = tpm_hash_log_extend_event(eventptr);
MIRP

/****************************************************/
/* Firmware API                                     */
/* SLOF:   tpm-driver-get-state ( -- state)         */
/* LIBTPM: state = tpm_driver_get_state(void)       */
/****************************************************/
PRIM(tpm_X2d_driver_X2d_get_X2d_state)
	PUSH;
	TOS.n = tpm_driver_get_state();
MIRP

/*********************************************************/
/* Firmware API                                          */
/* SLOF:   tpm-driver-get_failure-reason ( -- errcode)   */
/* LIBTPM: errcode = tpm_driver_get_failure_reason(void) */
/*********************************************************/
PRIM(tpm_X2d_driver_X2d_get_X2d_failure_X2d_reason)
	PUSH;
	TOS.n = tpm_driver_get_failure_reason();
MIRP

/*****************************************************************/
/* Firmware API                                                  */
/* SLOF:   tpm-hash-all ( data-ptr data-len hash-ptr -- errcode) */
/* LIBTPM: errcode = tpm-hash-all                                */
/*****************************************************************/
PRIM(tpm_X2d_hash_X2d_all)
	void *hashptr = TOS.a; POP;
	int datalen = TOS.n; POP;
	void *dataptr = TOS.a;
	TOS.n = tpm_hash_all(dataptr, datalen, hashptr);
MIRP

/************************************************/
/* Get the size of the log                      */
/* SLOF:   tpm-get-logsize         ( -- size )  */
/* LIBTPM: logsize = tpm_get_logsize(void)      */
/************************************************/
PRIM(tpm_X2d_get_X2d_logsize)
	PUSH;
	TOS.n = tpm_get_logsize();
MIRP

/**********************************************************************/
/* Measure and log event separators                                   */
/* SLOF:   tpm-add-event-separators  ( start-pcr end-pcr -- errcode)  */
/* LIBTPM: errcode = tpm_add_event_separators(start_pcr, end_pcr)     */
/**********************************************************************/
PRIM(tpm_X2d_add_X2d_event_X2d_separators)
	int end_pcr = TOS.u; POP;
	int start_pcr = TOS.u;
	TOS.n = tpm_add_event_separators(start_pcr, end_pcr);
MIRP

/*************************************************************************/
/* Measure and log boot connect vector (bcv) device's master boot record */
/* SLOF:   tpm-measure-bcv-mbr  ( bootdrv addr length -- errcode )       */
/* LIBTPM: errcode = tpm_measure_bcv_mbr(void)                           */
/*************************************************************************/
PRIM(tpm_X2d_measure_X2d_bcv_X2d_mbr)
	int length = TOS.u; POP;
	void *addr = TOS.a; POP;
	int bootdrv = TOS.u;
	TOS.n = tpm_measure_bcv_mbr(bootdrv, addr, length);
MIRP

/*************************************************************/
/* Process an opcode to change state of the TPM              */
/* SLOF:   tpm-process-opcode  ( opcode verbose -- errcode)  */
/* LIBTPM: tpm_process_opcode(opcode, verbose)               */
/*************************************************************/
PRIM(tpm_X2d_process_X2d_opcode)
	int opcode = TOS.u; POP;
	bool verbose = TOS.u;
	TOS.n = tpm_process_opcode(opcode, verbose);
MIRP

/************************************************/
/* Get state of the TPM in form of flags        */
/* SLOF:   tpm-get-state  ( -- flags )          */
/* LIBTPM: state = tpm_get_state()              */
/************************************************/
PRIM(tpm_X2d_get_X2d_state)
	PUSH;
	TOS.n = tpm_get_state();
MIRP

/************************************************/
/* Check whether the TPM is working             */
/* SLOF:   tpm-is-working  ( -- true | false )  */
/* LIBTPM: bool = tpm_is_working()              */
/************************************************/
PRIM(tpm_X2d_is_X2d_working)
	PUSH;
	TOS.n = tpm_is_working();
MIRP

/************************************************/
/* Have the S-CRTM measured                     */
/* SLOF:   tpm-measure-scrtm  ( -- errcode )    */
/* LIBTPM: errcode = tpm_measure_scrtm          */
/************************************************/
PRIM(tpm_X2d_measure_X2d_scrtm)
	PUSH;
	TOS.n = tpm_measure_scrtm();
MIRP

/****************************************************/
/* Firmware API                                     */
/* SLOF:   tpm-get-maximum-cmd-size ( -- max-size)  */
/* LIBTPM: maxsize = tpm_get_maximum_cmd_size()     */
/****************************************************/
PRIM(tpm_X2d_get_X2d_maximum_X2d_cmd_X2d_size)
	PUSH;
	TOS.n = tpm_get_maximum_cmd_size();
MIRP

/*******************************************************************/
/* Firmware API                                                    */
/* SLOF:   tpm-pass-through-to-tpm (buf-addr cmd-size -- rsp-size) */
/* LIBTPM: respsize = tpm_pass_through_to_tpm(buf, cmdsize)        */
/*******************************************************************/
PRIM(tpm_X2d_pass_X2d_through_X2d_to_X2d_tpm)
	int cmdsize = TOS.n; POP;
	void *buf = TOS.a;
	TOS.n = tpm_pass_through_to_tpm(buf, cmdsize);
MIRP
