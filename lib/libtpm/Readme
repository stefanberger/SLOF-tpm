This directory hosts (v)TPM related code.

Background:
-----------

A TPM is a crypto chip that is found in many systems. Besides it offering
a secure key store, among other functionality, it is also used to implement
'trusted boot'. This is realized by code in the firmware measuring parts of the
firmware's code and data as well as system data, such as the boot block, and
logging these measurements and storing (extending) them in the TPM's platform
configuration register (PCR).

The benefits of having a TPM (or vTPM) in a system are:

- enablement of trusted boot; this allow us to eventually extend the chain of
  trust from the hypervisor to the guests
- enablement of attestation so that one can verify what software is running on
  a machine (OpenPTS, OpenAttestation)
- provides TPM functionality to VMs, which includes a standardized mechanism
  to store keys and other blobs (Linux trusted keys, GNU TLS's TPM extensions)


QEMU/KVM + SLOF support:
------------------------

To enable a vTPM with QEMU, the following steps need to be followed

- build a recent version of libtpms

  #> git clone https://github.com/stefanberger/libtpms
  #> cd libtpms
  #> ./autogen.sh --prefix=/usr --with-tpm2 --with-openssl

  The following step may require to install dependencies

  #> make
  #> make check
  #> make install

- build swtpm

  #> git clone https://github.com/stefanberger/swtpm
  #> cd swtpm
  #> ./autogen.sh --prefix=/usr --with-openssl

  The following step may require to install dependencies

  #> ./configure --prefix=/usr --with-openssl
  #> make
  #> make check
  #> make install

- build QEMU with vTPM support:

  #> git clone https://github.com/stefanberger/qemu-tpm
  #> cd qemu-tpm

  The PPC64 patches are currently in the tpm-next+spapr.v3 branch
  #> git checkout origin/tpm-next+spapr.v3 -b tpm-next+spapr.v3

  The following step may require to install dependencies

  #> ./configure --prefix=/usr --enable-kvm --target-list="ppc64-softmmu"
  #> make
  #> make install

To start a QEMU VM with an attached vTPM (swtpm), run the following commands
as 'root'. The following will setup the vTPM so that its state will be stored
in /tmp/mytpm1. A unique directory for each VM instance with attached vTPM
should be provided. Whenever QEMU is started, the swtpm has to be started
before it. The './boot_rom.bin' represents SLOF with vTPM extensions built-in.

  #> mkdir -p /tmp/mytpm1
  #> swtpm socket --tpmstate dir=/tmp \
       --ctrl type=unixio,path=/tmp/mytpm1/ctrl.sock

  In another terminal:

  #> qemu-system-ppc64 \
      -enable-kvm \
      -boot menu=on \
      --chardev socket,id=chrtpm,path=/tmp/mytpm1/ctrl.sock \
      -tpmdev emulator,id=tpm0,chardev=chrtpm \
      -device tpm-spapr,tpmdev=tpm0 \
      -vnc 0.0.0.0:2 \
      [...]

     Add hard disk and other parameters as needed.

Notes:
  - The Linux kernel in the VM must have the tpm_ibmvtpm module available
    or built-in.

  - 'swtpm_ioctl --unix /tmp/ctrl.sock -s' can be used to gracefully shut
    down the vTPM.
